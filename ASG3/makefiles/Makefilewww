#---------------------------------------------------------------------#
#   James Vrionis                                                     #
#   jvrionis                                                          #
#   asg3                                                              #
#   Makefile for LALR(1) Parser using bison                           #
#---------------------------------------------------------------------#

# DEPSFILE  = Makefile.deps
# NOINCLUDE = ci clean spotless
# NEEDINCL  = ${filter ${NOINCLUDE}, ${MAKECMDGOALS}}
# #CPP       = g++ -g -O0 -Wall -Wextra -std=gnu++14

# GPP       = g++ -g -O0 -Wall -Wextra -std=gnu++14
# GRIND     = valgrind --leak-check=full --show-reachable=yes
# MKDEPS    = g++ -MM -std=gnu++14

# #FLEX      = flex --outfile=${LEXCPP}
# #BISON     = bison --defines=${PARSEHDR} --output=${PARSECPP} --xml
# #XML2HTML  = xsltproc /usr/share/bison/xslt/xml2xhtml.xsl

# MODULES   = astree lyutils string_set auxlib
# HDRSRC    = ${MODULES:=.h}
# CPPSRC    = ${MODULES:=.cpp} main.cpp
# FLEXSRC   = scanner.l
# BISONSRC  = parser.y

# PARSEHDR  = yyparse.h
# LEXCPP    = yylex.cc
# PARSECPP  = yyparse.cc
# CGENS     = ${LEXCPP} ${PARSECPP}
# ALLGENS   = ${PARSEHDR} ${CGENS}
# EXECBIN	  = oc


# LEXOUT    = yylex.outcut
# PARSEOUT  = yyparse.output
# REPORTS   = ${LEXOUT} ${PARSEOUT}
# MODSRC    = ${foreach MOD, ${MODULES}, ${MOD}.h ${MOD}.cpp}
# MISCSRC   = ${filter-out ${MODSRC}, ${HDRSRC} ${CPPSRC}}


# TESTINS   = ${wildcard test*.in}
# EXECTEST  = ${EXECBIN} -ly

# LISTSRC   = ${ALLSRC} ${DEPSFILE} ${PARSEHDR}
# ALLCSRC   = ${CPPSRC} ${CGENS}
# OBJECTS   = ${ALLCSRC:.cpp=.o}
# ALLSRC    = README ${FLEXSRC} ${BISONSRC} ${MODSRC} ${MISCSRC} \
#			  Makefile

# #SUBMIT 	  = $(HDRSRC) $(CPPSRC) scanner.l parser.y Makefile

# all : ${EXECBIN}

# ${EXECBIN} : ${OBJECTS}
# 	${GPP} -o${EXECBIN} ${OBJECTS}

# yylex.o : yylex.cpp
# 	@ # Suppress warning message from flex compilation.
# 	${GPP} -Wno-sign-compare -c $<

# %.o : %.cpp
# 	${GPP} -c $<

# ${LEXCPP} : ${FLEXSRC}
# 	${FLEX} ${FLEXSRC}

# ${PARSECPP} ${PARSEHDR} : ${BISONSRC}
# 	${BISON} ${BISONSRC}
# 	${XML2HTML} yyparse.xml >yyparse.html

# ci : ${ALLSRC} ${TESTINS}
# 	- checksource ${ALLSRC}
# 	- cpplint.py.perl ${CPPSRC}
# 	cid + ${ALLSRC} ${TESTINS} test?.inh

# lis : ${LISTSRC} tests
# 	mkpspdf List.source.ps ${LISTSRC}
# 	mkpspdf List.output.ps ${REPORTS} \
# 		${foreach test, ${TESTINS:.in=}, \
# 		${patsubst %, ${test}.%, in out err log}}

# clean :
# 	- rm ${OBJECTS} ${ALLGENS} ${REPORTS} ${DEPSFILE} core
# 	- rm ${foreach test, ${TESTINS:.in=}, \
# 		 ${patsubst %, ${test}.%, out err log}}

# spotless : clean
# 	- rm ${EXECBIN} List.*.ps List.*.pdf *.str *.tok *.err *.out

# deps : ${ALLCSRC}
# 	@ echo "# ${DEPSFILE} created `date` by ${MAKE}" >${DEPSFILE}
# 	${MKDEPS} ${ALLCSRC} >>${DEPSFILE}

# ${DEPSFILE} :
# 	@ touch ${DEPSFILE}
# 	${MAKE} --no-print-directory deps

# tests : ${EXECBIN}
# 	touch ${TESTINS}
# 	make --no-print-directory ${TESTINS:.in=.out}

# %.out %.err : %.in
# 	${GRIND} --log-file=$*.log ${EXECTEST} $< 1>$*.out 2>$*.err; \
# 	echo EXIT STATUS = $$? >>$*.log

# again :
# 	gmake --no-print-directory spotless deps ci all lis
    
# #submit :
# #	submit cmps104a-wm.f17 asg3 $(SUBMIT) README

# ifeq "${NEEDINCL}" ""
# include ${DEPSFILE}
# endif


GPP      = g++ -g -O0 -Wall -Wextra -std=gnu++14
GRIND    = valgrind --leak-check=full --show-reachable=yes

LSOURCES = scanner.l
YSOURCES = parser.y
CLGEN    = yylex.cc
HYGEN    = yyparse.h
CYGEN    = yyparse.cc
LREPORT  = yylex.output
YREPORT  = yyparse.output

all : oc

oc : main.o string_set.o auxlib.o lyutils.o astree.o yyparse.o yylex.o
	${GPP} main.o string_set.o auxlib.o lyutils.o astree.o \
	yyparse.o yylex.o -o oc

%.o : %.cpp
	${GPP} -c $<

ci :
	cid + Makefile parser.y astree.h astree.cpp lyutils.h \
			 lyutils.cpp yyparse.h auxlib.h auxlib.cpp \
			 string_set.h string_set.cpp main.cpp

spotless : clean
	- rm oc test?.out test?.err

clean :
	- rm *.o *.cc yyparse.h *.log *.output *.ast *.tok *.str

test : oc
	${GRIND} oc * * >test1.out 2>test1.err
	${GRIND} oc foo foo foo foo bar bar bar foo qux baz \
	         >test2.out 2>test2.err

${CLGEN} : ${LSOURCES}
	flex --outfile=${CLGEN} ${LSOURCES} 2>${LREPORT}
	- grep -v '^ ' ${LREPORT}

${CYGEN} ${HYGEN} : ${YSOURCES}
	bison --defines=${HYGEN} --output=${CYGEN} ${YSOURCES}


# Depencencies.
astree.o: astree.cpp astree.h auxlib.h string_set.h lyutils.h yyparse.h
lyutils.o: lyutils.cpp auxlib.h lyutils.h astree.h yyparse.h
stringset.o: string_set.cpp string_set.h auxlib.h
auxlib.o: auxlib.cpp auxlib.h
main.o: main.cpp astree.h auxlib.h string_set.h lyutils.h \
 yyparse.h
yylex.o: yylex.cc lyutils.h astree.h auxlib.h yyparse.h
yyparse.o: yyparse.cc astree.h auxlib.h lyutils.h yyparse.h

