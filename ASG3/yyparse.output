Terminals unused in grammar

   TOK_BOOL
   TOK_TRUE
   TOK_FALSE
   TOK_BLOCK
   TOK_CALL
   TOK_IFELSE
   TOK_INITDECL
   TOK_NEWARRAY
   TOK_TYPEID
   TOK_FIELD
   TOK_ORD
   TOK_CHR
   TOK_ROOT
   NUMBER
   TOK_PARAMLIST
   TOK_FUNCTION
   TOK_PROTOTYPE
   TOK_NEWSTRING
   TOK_INDEX
   TOK_DECLID
   TOK_RETURNVOID
   TOK_VARDECL
   '%'


State 14 conflicts: 1 shift/reduce
State 81 conflicts: 13 shift/reduce
State 104 conflicts: 13 shift/reduce
State 123 conflicts: 1 shift/reduce


Grammar

    0 $accept: start $end

    1 start: program

    2 program: program structdef
    3        | program function
    4        | program statement
    5        | program error '}'
    6        | program error ';'
    7        | %empty

    8 structstmts: '{' fielddecl ';'
    9            | structstmts fielddecl ';'

   10 structdef: TOK_STRUCT TOK_IDENT structstmts '}'
   11          | TOK_STRUCT TOK_IDENT '{' '}'

   12 fielddecl: basetype TOK_IDENT
   13          | basetype TOK_ARRAY TOK_IDENT

   14 basetype: TOK_VOID
   15         | TOK_CHAR
   16         | TOK_INT
   17         | TOK_STRING
   18         | TOK_IDENT

   19 params: '(' identdecl
   20       | params ',' identdecl

   21 function: identdecl params ')' block
   22         | identdecl params ')' ';'
   23         | identdecl '(' ')' block
   24         | identdecl '(' ')' ';'

   25 identdecl: basetype TOK_IDENT
   26          | basetype TOK_ARRAY TOK_IDENT

   27 body: '{' statement
   28     | body statement

   29 block: body '}'
   30      | '{' '}'

   31 statement: block
   32          | vardecl
   33          | while
   34          | ifelse
   35          | return
   36          | expr ';'
   37          | ';'

   38 vardecl: identdecl '=' expr ';'

   39 while: TOK_WHILE '(' expr ')' statement

   40 ifelse: TOK_IF '(' expr ')' statement TOK_ELSE statement
   41       | TOK_IF '(' expr ')' statement

   42 return: TOK_RETURN ';'
   43       | TOK_RETURN expr ';'

   44 expr: expr binop expr
   45     | unop expr
   46     | allocator
   47     | call
   48     | '(' expr ')'
   49     | variable
   50     | constant

   51 binop: TOK_EQ
   52      | TOK_NE
   53      | TOK_LT
   54      | TOK_LE
   55      | TOK_GT
   56      | TOK_GE
   57      | '+'
   58      | '-'
   59      | '*'
   60      | '/'
   61      | '='

   62 unop: TOK_POS
   63     | TOK_NEG
   64     | '!'
   65     | TOK_NEW

   66 allocator: TOK_NEW TOK_IDENT '(' ')'
   67          | TOK_NEW TOK_STRING '(' expr ')'
   68          | TOK_NEW basetype '[' expr ']'

   69 cexprs: TOK_IDENT '(' expr
   70       | cexprs ',' expr

   71 call: cexprs ')'
   72     | TOK_IDENT '(' ')'

   73 variable: TOK_IDENT
   74         | expr '[' expr ']'
   75         | expr '.' TOK_IDENT

   76 constant: TOK_INTCON
   77         | TOK_CHARCON
   78         | TOK_STRINGCON
   79         | TOK_NULL


Terminals, with rules where they appear

$end (0) 0
'!' (33) 64
'%' (37)
'(' (40) 19 23 24 39 40 41 48 66 67 69 72
')' (41) 21 22 23 24 39 40 41 48 66 67 71 72
'*' (42) 59
'+' (43) 57
',' (44) 20 70
'-' (45) 58
'.' (46) 75
'/' (47) 60
';' (59) 6 8 9 22 24 36 37 38 42 43
'=' (61) 38 61
'[' (91) 68 74
']' (93) 68 74
'{' (123) 8 11 27 30
'}' (125) 5 10 11 29 30
error (256) 5 6
TOK_VOID (258) 14
TOK_CHAR (259) 15
TOK_INT (260) 16
TOK_BOOL (261)
TOK_STRING (262) 17 67
TOK_IF (263) 40 41
TOK_ELSE (264) 40
TOK_WHILE (265) 39
TOK_RETURN (266) 42 43
TOK_STRUCT (267) 10 11
TOK_TRUE (268)
TOK_FALSE (269)
TOK_NULL (270) 79
TOK_NEW (271) 65 66 67 68
TOK_ARRAY (272) 13 26
TOK_EQ (273) 51
TOK_NE (274) 52
TOK_LT (275) 53
TOK_LE (276) 54
TOK_GT (277) 55
TOK_GE (278) 56
TOK_IDENT (279) 10 11 12 13 18 25 26 66 69 72 73 75
TOK_INTCON (280) 76
TOK_CHARCON (281) 77
TOK_STRINGCON (282) 78
TOK_BLOCK (283)
TOK_CALL (284)
TOK_IFELSE (285)
TOK_INITDECL (286)
TOK_POS (287) 62
TOK_NEG (288) 63
TOK_NEWARRAY (289)
TOK_TYPEID (290)
TOK_FIELD (291)
TOK_ORD (292)
TOK_CHR (293)
TOK_ROOT (294)
NUMBER (295)
TOK_PARAMLIST (296)
TOK_FUNCTION (297)
TOK_PROTOTYPE (298)
TOK_NEWSTRING (299)
TOK_INDEX (300)
TOK_DECLID (301)
TOK_RETURNVOID (302)
TOK_VARDECL (303)


Nonterminals, with rules where they appear

$accept (65)
    on left: 0
start (66)
    on left: 1, on right: 0
program (67)
    on left: 2 3 4 5 6 7, on right: 1 2 3 4 5 6
structstmts (68)
    on left: 8 9, on right: 9 10
structdef (69)
    on left: 10 11, on right: 2
fielddecl (70)
    on left: 12 13, on right: 8 9
basetype (71)
    on left: 14 15 16 17 18, on right: 12 13 25 26 68
params (72)
    on left: 19 20, on right: 20 21 22
function (73)
    on left: 21 22 23 24, on right: 3
identdecl (74)
    on left: 25 26, on right: 19 20 21 22 23 24 38
body (75)
    on left: 27 28, on right: 28 29
block (76)
    on left: 29 30, on right: 21 23 31
statement (77)
    on left: 31 32 33 34 35 36 37, on right: 4 27 28 39 40 41
vardecl (78)
    on left: 38, on right: 32
while (79)
    on left: 39, on right: 33
ifelse (80)
    on left: 40 41, on right: 34
return (81)
    on left: 42 43, on right: 35
expr (82)
    on left: 44 45 46 47 48 49 50, on right: 36 38 39 40 41 43 44 45
    48 67 68 69 70 74 75
binop (83)
    on left: 51 52 53 54 55 56 57 58 59 60 61, on right: 44
unop (84)
    on left: 62 63 64 65, on right: 45
allocator (85)
    on left: 66 67 68, on right: 46
cexprs (86)
    on left: 69 70, on right: 70 71
call (87)
    on left: 71 72, on right: 47
variable (88)
    on left: 73 74 75, on right: 49
constant (89)
    on left: 76 77 78 79, on right: 50


State 0

    0 $accept: . start $end

    $default  reduce using rule 7 (program)

    start    go to state 1
    program  go to state 2


State 1

    0 $accept: start . $end

    $end  shift, and go to state 3


State 2

    1 start: program .
    2 program: program . structdef
    3        | program . function
    4        | program . statement
    5        | program . error '}'
    6        | program . error ';'

    error          shift, and go to state 4
    TOK_VOID       shift, and go to state 5
    TOK_CHAR       shift, and go to state 6
    TOK_INT        shift, and go to state 7
    TOK_STRING     shift, and go to state 8
    TOK_IF         shift, and go to state 9
    TOK_WHILE      shift, and go to state 10
    TOK_RETURN     shift, and go to state 11
    TOK_STRUCT     shift, and go to state 12
    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 15
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    TOK_POS        shift, and go to state 19
    TOK_NEG        shift, and go to state 20
    '!'            shift, and go to state 21
    '('            shift, and go to state 22
    ';'            shift, and go to state 23
    '{'            shift, and go to state 24

    $end  reduce using rule 1 (start)

    structdef  go to state 25
    basetype   go to state 26
    function   go to state 27
    identdecl  go to state 28
    body       go to state 29
    block      go to state 30
    statement  go to state 31
    vardecl    go to state 32
    while      go to state 33
    ifelse     go to state 34
    return     go to state 35
    expr       go to state 36
    unop       go to state 37
    allocator  go to state 38
    cexprs     go to state 39
    call       go to state 40
    variable   go to state 41
    constant   go to state 42


State 3

    0 $accept: start $end .

    $default  accept


State 4

    5 program: program error . '}'
    6        | program error . ';'

    '}'  shift, and go to state 43
    ';'  shift, and go to state 44


State 5

   14 basetype: TOK_VOID .

    $default  reduce using rule 14 (basetype)


State 6

   15 basetype: TOK_CHAR .

    $default  reduce using rule 15 (basetype)


State 7

   16 basetype: TOK_INT .

    $default  reduce using rule 16 (basetype)


State 8

   17 basetype: TOK_STRING .

    $default  reduce using rule 17 (basetype)


State 9

   40 ifelse: TOK_IF . '(' expr ')' statement TOK_ELSE statement
   41       | TOK_IF . '(' expr ')' statement

    '('  shift, and go to state 45


State 10

   39 while: TOK_WHILE . '(' expr ')' statement

    '('  shift, and go to state 46


State 11

   42 return: TOK_RETURN . ';'
   43       | TOK_RETURN . expr ';'

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 47
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    TOK_POS        shift, and go to state 19
    TOK_NEG        shift, and go to state 20
    '!'            shift, and go to state 21
    '('            shift, and go to state 22
    ';'            shift, and go to state 48

    expr       go to state 49
    unop       go to state 37
    allocator  go to state 38
    cexprs     go to state 39
    call       go to state 40
    variable   go to state 41
    constant   go to state 42


State 12

   10 structdef: TOK_STRUCT . TOK_IDENT structstmts '}'
   11          | TOK_STRUCT . TOK_IDENT '{' '}'

    TOK_IDENT  shift, and go to state 50


State 13

   79 constant: TOK_NULL .

    $default  reduce using rule 79 (constant)


State 14

   65 unop: TOK_NEW .
   66 allocator: TOK_NEW . TOK_IDENT '(' ')'
   67          | TOK_NEW . TOK_STRING '(' expr ')'
   68          | TOK_NEW . basetype '[' expr ']'

    TOK_VOID    shift, and go to state 5
    TOK_CHAR    shift, and go to state 6
    TOK_INT     shift, and go to state 7
    TOK_STRING  shift, and go to state 51
    TOK_IDENT   shift, and go to state 52

    TOK_IDENT  [reduce using rule 65 (unop)]
    $default   reduce using rule 65 (unop)

    basetype  go to state 53


State 15

   18 basetype: TOK_IDENT .
   69 cexprs: TOK_IDENT . '(' expr
   72 call: TOK_IDENT . '(' ')'
   73 variable: TOK_IDENT .

    '('  shift, and go to state 54

    TOK_ARRAY  reduce using rule 18 (basetype)
    TOK_IDENT  reduce using rule 18 (basetype)
    $default   reduce using rule 73 (variable)


State 16

   76 constant: TOK_INTCON .

    $default  reduce using rule 76 (constant)


State 17

   77 constant: TOK_CHARCON .

    $default  reduce using rule 77 (constant)


State 18

   78 constant: TOK_STRINGCON .

    $default  reduce using rule 78 (constant)


State 19

   62 unop: TOK_POS .

    $default  reduce using rule 62 (unop)


State 20

   63 unop: TOK_NEG .

    $default  reduce using rule 63 (unop)


State 21

   64 unop: '!' .

    $default  reduce using rule 64 (unop)


State 22

   48 expr: '(' . expr ')'

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 47
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    TOK_POS        shift, and go to state 19
    TOK_NEG        shift, and go to state 20
    '!'            shift, and go to state 21
    '('            shift, and go to state 22

    expr       go to state 55
    unop       go to state 37
    allocator  go to state 38
    cexprs     go to state 39
    call       go to state 40
    variable   go to state 41
    constant   go to state 42


State 23

   37 statement: ';' .

    $default  reduce using rule 37 (statement)


State 24

   27 body: '{' . statement
   30 block: '{' . '}'

    TOK_VOID       shift, and go to state 5
    TOK_CHAR       shift, and go to state 6
    TOK_INT        shift, and go to state 7
    TOK_STRING     shift, and go to state 8
    TOK_IF         shift, and go to state 9
    TOK_WHILE      shift, and go to state 10
    TOK_RETURN     shift, and go to state 11
    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 15
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    TOK_POS        shift, and go to state 19
    TOK_NEG        shift, and go to state 20
    '!'            shift, and go to state 21
    '('            shift, and go to state 22
    '}'            shift, and go to state 56
    ';'            shift, and go to state 23
    '{'            shift, and go to state 24

    basetype   go to state 26
    identdecl  go to state 57
    body       go to state 29
    block      go to state 30
    statement  go to state 58
    vardecl    go to state 32
    while      go to state 33
    ifelse     go to state 34
    return     go to state 35
    expr       go to state 36
    unop       go to state 37
    allocator  go to state 38
    cexprs     go to state 39
    call       go to state 40
    variable   go to state 41
    constant   go to state 42


State 25

    2 program: program structdef .

    $default  reduce using rule 2 (program)


State 26

   25 identdecl: basetype . TOK_IDENT
   26          | basetype . TOK_ARRAY TOK_IDENT

    TOK_ARRAY  shift, and go to state 59
    TOK_IDENT  shift, and go to state 60


State 27

    3 program: program function .

    $default  reduce using rule 3 (program)


State 28

   21 function: identdecl . params ')' block
   22         | identdecl . params ')' ';'
   23         | identdecl . '(' ')' block
   24         | identdecl . '(' ')' ';'
   38 vardecl: identdecl . '=' expr ';'

    '='  shift, and go to state 61
    '('  shift, and go to state 62

    params  go to state 63


State 29

   28 body: body . statement
   29 block: body . '}'

    TOK_VOID       shift, and go to state 5
    TOK_CHAR       shift, and go to state 6
    TOK_INT        shift, and go to state 7
    TOK_STRING     shift, and go to state 8
    TOK_IF         shift, and go to state 9
    TOK_WHILE      shift, and go to state 10
    TOK_RETURN     shift, and go to state 11
    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 15
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    TOK_POS        shift, and go to state 19
    TOK_NEG        shift, and go to state 20
    '!'            shift, and go to state 21
    '('            shift, and go to state 22
    '}'            shift, and go to state 64
    ';'            shift, and go to state 23
    '{'            shift, and go to state 24

    basetype   go to state 26
    identdecl  go to state 57
    body       go to state 29
    block      go to state 30
    statement  go to state 65
    vardecl    go to state 32
    while      go to state 33
    ifelse     go to state 34
    return     go to state 35
    expr       go to state 36
    unop       go to state 37
    allocator  go to state 38
    cexprs     go to state 39
    call       go to state 40
    variable   go to state 41
    constant   go to state 42


State 30

   31 statement: block .

    $default  reduce using rule 31 (statement)


State 31

    4 program: program statement .

    $default  reduce using rule 4 (program)


State 32

   32 statement: vardecl .

    $default  reduce using rule 32 (statement)


State 33

   33 statement: while .

    $default  reduce using rule 33 (statement)


State 34

   34 statement: ifelse .

    $default  reduce using rule 34 (statement)


State 35

   35 statement: return .

    $default  reduce using rule 35 (statement)


State 36

   36 statement: expr . ';'
   44 expr: expr . binop expr
   74 variable: expr . '[' expr ']'
   75         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 66
    TOK_NE  shift, and go to state 67
    TOK_LT  shift, and go to state 68
    TOK_LE  shift, and go to state 69
    TOK_GT  shift, and go to state 70
    TOK_GE  shift, and go to state 71
    '='     shift, and go to state 72
    '+'     shift, and go to state 73
    '-'     shift, and go to state 74
    '*'     shift, and go to state 75
    '/'     shift, and go to state 76
    '['     shift, and go to state 77
    '.'     shift, and go to state 78
    ';'     shift, and go to state 79

    binop  go to state 80


State 37

   45 expr: unop . expr

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 47
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    TOK_POS        shift, and go to state 19
    TOK_NEG        shift, and go to state 20
    '!'            shift, and go to state 21
    '('            shift, and go to state 22

    expr       go to state 81
    unop       go to state 37
    allocator  go to state 38
    cexprs     go to state 39
    call       go to state 40
    variable   go to state 41
    constant   go to state 42


State 38

   46 expr: allocator .

    $default  reduce using rule 46 (expr)


State 39

   70 cexprs: cexprs . ',' expr
   71 call: cexprs . ')'

    ','  shift, and go to state 82
    ')'  shift, and go to state 83


State 40

   47 expr: call .

    $default  reduce using rule 47 (expr)


State 41

   49 expr: variable .

    $default  reduce using rule 49 (expr)


State 42

   50 expr: constant .

    $default  reduce using rule 50 (expr)


State 43

    5 program: program error '}' .

    $default  reduce using rule 5 (program)


State 44

    6 program: program error ';' .

    $default  reduce using rule 6 (program)


State 45

   40 ifelse: TOK_IF '(' . expr ')' statement TOK_ELSE statement
   41       | TOK_IF '(' . expr ')' statement

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 47
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    TOK_POS        shift, and go to state 19
    TOK_NEG        shift, and go to state 20
    '!'            shift, and go to state 21
    '('            shift, and go to state 22

    expr       go to state 84
    unop       go to state 37
    allocator  go to state 38
    cexprs     go to state 39
    call       go to state 40
    variable   go to state 41
    constant   go to state 42


State 46

   39 while: TOK_WHILE '(' . expr ')' statement

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 47
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    TOK_POS        shift, and go to state 19
    TOK_NEG        shift, and go to state 20
    '!'            shift, and go to state 21
    '('            shift, and go to state 22

    expr       go to state 85
    unop       go to state 37
    allocator  go to state 38
    cexprs     go to state 39
    call       go to state 40
    variable   go to state 41
    constant   go to state 42


State 47

   69 cexprs: TOK_IDENT . '(' expr
   72 call: TOK_IDENT . '(' ')'
   73 variable: TOK_IDENT .

    '('  shift, and go to state 54

    $default  reduce using rule 73 (variable)


State 48

   42 return: TOK_RETURN ';' .

    $default  reduce using rule 42 (return)


State 49

   43 return: TOK_RETURN expr . ';'
   44 expr: expr . binop expr
   74 variable: expr . '[' expr ']'
   75         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 66
    TOK_NE  shift, and go to state 67
    TOK_LT  shift, and go to state 68
    TOK_LE  shift, and go to state 69
    TOK_GT  shift, and go to state 70
    TOK_GE  shift, and go to state 71
    '='     shift, and go to state 72
    '+'     shift, and go to state 73
    '-'     shift, and go to state 74
    '*'     shift, and go to state 75
    '/'     shift, and go to state 76
    '['     shift, and go to state 77
    '.'     shift, and go to state 78
    ';'     shift, and go to state 86

    binop  go to state 80


State 50

   10 structdef: TOK_STRUCT TOK_IDENT . structstmts '}'
   11          | TOK_STRUCT TOK_IDENT . '{' '}'

    '{'  shift, and go to state 87

    structstmts  go to state 88


State 51

   17 basetype: TOK_STRING .
   67 allocator: TOK_NEW TOK_STRING . '(' expr ')'

    '('  shift, and go to state 89

    $default  reduce using rule 17 (basetype)


State 52

   18 basetype: TOK_IDENT .
   66 allocator: TOK_NEW TOK_IDENT . '(' ')'

    '('  shift, and go to state 90

    $default  reduce using rule 18 (basetype)


State 53

   68 allocator: TOK_NEW basetype . '[' expr ']'

    '['  shift, and go to state 91


State 54

   69 cexprs: TOK_IDENT '(' . expr
   72 call: TOK_IDENT '(' . ')'

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 47
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    TOK_POS        shift, and go to state 19
    TOK_NEG        shift, and go to state 20
    '!'            shift, and go to state 21
    '('            shift, and go to state 22
    ')'            shift, and go to state 92

    expr       go to state 93
    unop       go to state 37
    allocator  go to state 38
    cexprs     go to state 39
    call       go to state 40
    variable   go to state 41
    constant   go to state 42


State 55

   44 expr: expr . binop expr
   48     | '(' expr . ')'
   74 variable: expr . '[' expr ']'
   75         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 66
    TOK_NE  shift, and go to state 67
    TOK_LT  shift, and go to state 68
    TOK_LE  shift, and go to state 69
    TOK_GT  shift, and go to state 70
    TOK_GE  shift, and go to state 71
    '='     shift, and go to state 72
    '+'     shift, and go to state 73
    '-'     shift, and go to state 74
    '*'     shift, and go to state 75
    '/'     shift, and go to state 76
    '['     shift, and go to state 77
    '.'     shift, and go to state 78
    ')'     shift, and go to state 94

    binop  go to state 80


State 56

   30 block: '{' '}' .

    $default  reduce using rule 30 (block)


State 57

   38 vardecl: identdecl . '=' expr ';'

    '='  shift, and go to state 61


State 58

   27 body: '{' statement .

    $default  reduce using rule 27 (body)


State 59

   26 identdecl: basetype TOK_ARRAY . TOK_IDENT

    TOK_IDENT  shift, and go to state 95


State 60

   25 identdecl: basetype TOK_IDENT .

    $default  reduce using rule 25 (identdecl)


State 61

   38 vardecl: identdecl '=' . expr ';'

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 47
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    TOK_POS        shift, and go to state 19
    TOK_NEG        shift, and go to state 20
    '!'            shift, and go to state 21
    '('            shift, and go to state 22

    expr       go to state 96
    unop       go to state 37
    allocator  go to state 38
    cexprs     go to state 39
    call       go to state 40
    variable   go to state 41
    constant   go to state 42


State 62

   19 params: '(' . identdecl
   23 function: identdecl '(' . ')' block
   24         | identdecl '(' . ')' ';'

    TOK_VOID    shift, and go to state 5
    TOK_CHAR    shift, and go to state 6
    TOK_INT     shift, and go to state 7
    TOK_STRING  shift, and go to state 8
    TOK_IDENT   shift, and go to state 97
    ')'         shift, and go to state 98

    basetype   go to state 26
    identdecl  go to state 99


State 63

   20 params: params . ',' identdecl
   21 function: identdecl params . ')' block
   22         | identdecl params . ')' ';'

    ','  shift, and go to state 100
    ')'  shift, and go to state 101


State 64

   29 block: body '}' .

    $default  reduce using rule 29 (block)


State 65

   28 body: body statement .

    $default  reduce using rule 28 (body)


State 66

   51 binop: TOK_EQ .

    $default  reduce using rule 51 (binop)


State 67

   52 binop: TOK_NE .

    $default  reduce using rule 52 (binop)


State 68

   53 binop: TOK_LT .

    $default  reduce using rule 53 (binop)


State 69

   54 binop: TOK_LE .

    $default  reduce using rule 54 (binop)


State 70

   55 binop: TOK_GT .

    $default  reduce using rule 55 (binop)


State 71

   56 binop: TOK_GE .

    $default  reduce using rule 56 (binop)


State 72

   61 binop: '=' .

    $default  reduce using rule 61 (binop)


State 73

   57 binop: '+' .

    $default  reduce using rule 57 (binop)


State 74

   58 binop: '-' .

    $default  reduce using rule 58 (binop)


State 75

   59 binop: '*' .

    $default  reduce using rule 59 (binop)


State 76

   60 binop: '/' .

    $default  reduce using rule 60 (binop)


State 77

   74 variable: expr '[' . expr ']'

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 47
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    TOK_POS        shift, and go to state 19
    TOK_NEG        shift, and go to state 20
    '!'            shift, and go to state 21
    '('            shift, and go to state 22

    expr       go to state 102
    unop       go to state 37
    allocator  go to state 38
    cexprs     go to state 39
    call       go to state 40
    variable   go to state 41
    constant   go to state 42


State 78

   75 variable: expr '.' . TOK_IDENT

    TOK_IDENT  shift, and go to state 103


State 79

   36 statement: expr ';' .

    $default  reduce using rule 36 (statement)


State 80

   44 expr: expr binop . expr

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 47
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    TOK_POS        shift, and go to state 19
    TOK_NEG        shift, and go to state 20
    '!'            shift, and go to state 21
    '('            shift, and go to state 22

    expr       go to state 104
    unop       go to state 37
    allocator  go to state 38
    cexprs     go to state 39
    call       go to state 40
    variable   go to state 41
    constant   go to state 42


State 81

   44 expr: expr . binop expr
   45     | unop expr .
   74 variable: expr . '[' expr ']'
   75         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 66
    TOK_NE  shift, and go to state 67
    TOK_LT  shift, and go to state 68
    TOK_LE  shift, and go to state 69
    TOK_GT  shift, and go to state 70
    TOK_GE  shift, and go to state 71
    '='     shift, and go to state 72
    '+'     shift, and go to state 73
    '-'     shift, and go to state 74
    '*'     shift, and go to state 75
    '/'     shift, and go to state 76
    '['     shift, and go to state 77
    '.'     shift, and go to state 78

    TOK_EQ    [reduce using rule 45 (expr)]
    TOK_NE    [reduce using rule 45 (expr)]
    TOK_LT    [reduce using rule 45 (expr)]
    TOK_LE    [reduce using rule 45 (expr)]
    TOK_GT    [reduce using rule 45 (expr)]
    TOK_GE    [reduce using rule 45 (expr)]
    '='       [reduce using rule 45 (expr)]
    '+'       [reduce using rule 45 (expr)]
    '-'       [reduce using rule 45 (expr)]
    '*'       [reduce using rule 45 (expr)]
    '/'       [reduce using rule 45 (expr)]
    '['       [reduce using rule 45 (expr)]
    '.'       [reduce using rule 45 (expr)]
    $default  reduce using rule 45 (expr)

    binop  go to state 80


State 82

   70 cexprs: cexprs ',' . expr

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 47
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    TOK_POS        shift, and go to state 19
    TOK_NEG        shift, and go to state 20
    '!'            shift, and go to state 21
    '('            shift, and go to state 22

    expr       go to state 105
    unop       go to state 37
    allocator  go to state 38
    cexprs     go to state 39
    call       go to state 40
    variable   go to state 41
    constant   go to state 42


State 83

   71 call: cexprs ')' .

    $default  reduce using rule 71 (call)


State 84

   40 ifelse: TOK_IF '(' expr . ')' statement TOK_ELSE statement
   41       | TOK_IF '(' expr . ')' statement
   44 expr: expr . binop expr
   74 variable: expr . '[' expr ']'
   75         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 66
    TOK_NE  shift, and go to state 67
    TOK_LT  shift, and go to state 68
    TOK_LE  shift, and go to state 69
    TOK_GT  shift, and go to state 70
    TOK_GE  shift, and go to state 71
    '='     shift, and go to state 72
    '+'     shift, and go to state 73
    '-'     shift, and go to state 74
    '*'     shift, and go to state 75
    '/'     shift, and go to state 76
    '['     shift, and go to state 77
    '.'     shift, and go to state 78
    ')'     shift, and go to state 106

    binop  go to state 80


State 85

   39 while: TOK_WHILE '(' expr . ')' statement
   44 expr: expr . binop expr
   74 variable: expr . '[' expr ']'
   75         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 66
    TOK_NE  shift, and go to state 67
    TOK_LT  shift, and go to state 68
    TOK_LE  shift, and go to state 69
    TOK_GT  shift, and go to state 70
    TOK_GE  shift, and go to state 71
    '='     shift, and go to state 72
    '+'     shift, and go to state 73
    '-'     shift, and go to state 74
    '*'     shift, and go to state 75
    '/'     shift, and go to state 76
    '['     shift, and go to state 77
    '.'     shift, and go to state 78
    ')'     shift, and go to state 107

    binop  go to state 80


State 86

   43 return: TOK_RETURN expr ';' .

    $default  reduce using rule 43 (return)


State 87

    8 structstmts: '{' . fielddecl ';'
   11 structdef: TOK_STRUCT TOK_IDENT '{' . '}'

    TOK_VOID    shift, and go to state 5
    TOK_CHAR    shift, and go to state 6
    TOK_INT     shift, and go to state 7
    TOK_STRING  shift, and go to state 8
    TOK_IDENT   shift, and go to state 97
    '}'         shift, and go to state 108

    fielddecl  go to state 109
    basetype   go to state 110


State 88

    9 structstmts: structstmts . fielddecl ';'
   10 structdef: TOK_STRUCT TOK_IDENT structstmts . '}'

    TOK_VOID    shift, and go to state 5
    TOK_CHAR    shift, and go to state 6
    TOK_INT     shift, and go to state 7
    TOK_STRING  shift, and go to state 8
    TOK_IDENT   shift, and go to state 97
    '}'         shift, and go to state 111

    fielddecl  go to state 112
    basetype   go to state 110


State 89

   67 allocator: TOK_NEW TOK_STRING '(' . expr ')'

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 47
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    TOK_POS        shift, and go to state 19
    TOK_NEG        shift, and go to state 20
    '!'            shift, and go to state 21
    '('            shift, and go to state 22

    expr       go to state 113
    unop       go to state 37
    allocator  go to state 38
    cexprs     go to state 39
    call       go to state 40
    variable   go to state 41
    constant   go to state 42


State 90

   66 allocator: TOK_NEW TOK_IDENT '(' . ')'

    ')'  shift, and go to state 114


State 91

   68 allocator: TOK_NEW basetype '[' . expr ']'

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 47
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    TOK_POS        shift, and go to state 19
    TOK_NEG        shift, and go to state 20
    '!'            shift, and go to state 21
    '('            shift, and go to state 22

    expr       go to state 115
    unop       go to state 37
    allocator  go to state 38
    cexprs     go to state 39
    call       go to state 40
    variable   go to state 41
    constant   go to state 42


State 92

   72 call: TOK_IDENT '(' ')' .

    $default  reduce using rule 72 (call)


State 93

   44 expr: expr . binop expr
   69 cexprs: TOK_IDENT '(' expr .
   74 variable: expr . '[' expr ']'
   75         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 66
    TOK_NE  shift, and go to state 67
    TOK_LT  shift, and go to state 68
    TOK_LE  shift, and go to state 69
    TOK_GT  shift, and go to state 70
    TOK_GE  shift, and go to state 71
    '='     shift, and go to state 72
    '+'     shift, and go to state 73
    '-'     shift, and go to state 74
    '*'     shift, and go to state 75
    '/'     shift, and go to state 76
    '['     shift, and go to state 77
    '.'     shift, and go to state 78

    $default  reduce using rule 69 (cexprs)

    binop  go to state 80


State 94

   48 expr: '(' expr ')' .

    $default  reduce using rule 48 (expr)


State 95

   26 identdecl: basetype TOK_ARRAY TOK_IDENT .

    $default  reduce using rule 26 (identdecl)


State 96

   38 vardecl: identdecl '=' expr . ';'
   44 expr: expr . binop expr
   74 variable: expr . '[' expr ']'
   75         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 66
    TOK_NE  shift, and go to state 67
    TOK_LT  shift, and go to state 68
    TOK_LE  shift, and go to state 69
    TOK_GT  shift, and go to state 70
    TOK_GE  shift, and go to state 71
    '='     shift, and go to state 72
    '+'     shift, and go to state 73
    '-'     shift, and go to state 74
    '*'     shift, and go to state 75
    '/'     shift, and go to state 76
    '['     shift, and go to state 77
    '.'     shift, and go to state 78
    ';'     shift, and go to state 116

    binop  go to state 80


State 97

   18 basetype: TOK_IDENT .

    $default  reduce using rule 18 (basetype)


State 98

   23 function: identdecl '(' ')' . block
   24         | identdecl '(' ')' . ';'

    ';'  shift, and go to state 117
    '{'  shift, and go to state 24

    body   go to state 29
    block  go to state 118


State 99

   19 params: '(' identdecl .

    $default  reduce using rule 19 (params)


State 100

   20 params: params ',' . identdecl

    TOK_VOID    shift, and go to state 5
    TOK_CHAR    shift, and go to state 6
    TOK_INT     shift, and go to state 7
    TOK_STRING  shift, and go to state 8
    TOK_IDENT   shift, and go to state 97

    basetype   go to state 26
    identdecl  go to state 119


State 101

   21 function: identdecl params ')' . block
   22         | identdecl params ')' . ';'

    ';'  shift, and go to state 120
    '{'  shift, and go to state 24

    body   go to state 29
    block  go to state 121


State 102

   44 expr: expr . binop expr
   74 variable: expr . '[' expr ']'
   74         | expr '[' expr . ']'
   75         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 66
    TOK_NE  shift, and go to state 67
    TOK_LT  shift, and go to state 68
    TOK_LE  shift, and go to state 69
    TOK_GT  shift, and go to state 70
    TOK_GE  shift, and go to state 71
    '='     shift, and go to state 72
    '+'     shift, and go to state 73
    '-'     shift, and go to state 74
    '*'     shift, and go to state 75
    '/'     shift, and go to state 76
    '['     shift, and go to state 77
    '.'     shift, and go to state 78
    ']'     shift, and go to state 122

    binop  go to state 80


State 103

   75 variable: expr '.' TOK_IDENT .

    $default  reduce using rule 75 (variable)


State 104

   44 expr: expr . binop expr
   44     | expr binop expr .
   74 variable: expr . '[' expr ']'
   75         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 66
    TOK_NE  shift, and go to state 67
    TOK_LT  shift, and go to state 68
    TOK_LE  shift, and go to state 69
    TOK_GT  shift, and go to state 70
    TOK_GE  shift, and go to state 71
    '='     shift, and go to state 72
    '+'     shift, and go to state 73
    '-'     shift, and go to state 74
    '*'     shift, and go to state 75
    '/'     shift, and go to state 76
    '['     shift, and go to state 77
    '.'     shift, and go to state 78

    TOK_EQ    [reduce using rule 44 (expr)]
    TOK_NE    [reduce using rule 44 (expr)]
    TOK_LT    [reduce using rule 44 (expr)]
    TOK_LE    [reduce using rule 44 (expr)]
    TOK_GT    [reduce using rule 44 (expr)]
    TOK_GE    [reduce using rule 44 (expr)]
    '='       [reduce using rule 44 (expr)]
    '+'       [reduce using rule 44 (expr)]
    '-'       [reduce using rule 44 (expr)]
    '*'       [reduce using rule 44 (expr)]
    '/'       [reduce using rule 44 (expr)]
    '['       [reduce using rule 44 (expr)]
    '.'       [reduce using rule 44 (expr)]
    $default  reduce using rule 44 (expr)

    binop  go to state 80


State 105

   44 expr: expr . binop expr
   70 cexprs: cexprs ',' expr .
   74 variable: expr . '[' expr ']'
   75         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 66
    TOK_NE  shift, and go to state 67
    TOK_LT  shift, and go to state 68
    TOK_LE  shift, and go to state 69
    TOK_GT  shift, and go to state 70
    TOK_GE  shift, and go to state 71
    '='     shift, and go to state 72
    '+'     shift, and go to state 73
    '-'     shift, and go to state 74
    '*'     shift, and go to state 75
    '/'     shift, and go to state 76
    '['     shift, and go to state 77
    '.'     shift, and go to state 78

    $default  reduce using rule 70 (cexprs)

    binop  go to state 80


State 106

   40 ifelse: TOK_IF '(' expr ')' . statement TOK_ELSE statement
   41       | TOK_IF '(' expr ')' . statement

    TOK_VOID       shift, and go to state 5
    TOK_CHAR       shift, and go to state 6
    TOK_INT        shift, and go to state 7
    TOK_STRING     shift, and go to state 8
    TOK_IF         shift, and go to state 9
    TOK_WHILE      shift, and go to state 10
    TOK_RETURN     shift, and go to state 11
    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 15
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    TOK_POS        shift, and go to state 19
    TOK_NEG        shift, and go to state 20
    '!'            shift, and go to state 21
    '('            shift, and go to state 22
    ';'            shift, and go to state 23
    '{'            shift, and go to state 24

    basetype   go to state 26
    identdecl  go to state 57
    body       go to state 29
    block      go to state 30
    statement  go to state 123
    vardecl    go to state 32
    while      go to state 33
    ifelse     go to state 34
    return     go to state 35
    expr       go to state 36
    unop       go to state 37
    allocator  go to state 38
    cexprs     go to state 39
    call       go to state 40
    variable   go to state 41
    constant   go to state 42


State 107

   39 while: TOK_WHILE '(' expr ')' . statement

    TOK_VOID       shift, and go to state 5
    TOK_CHAR       shift, and go to state 6
    TOK_INT        shift, and go to state 7
    TOK_STRING     shift, and go to state 8
    TOK_IF         shift, and go to state 9
    TOK_WHILE      shift, and go to state 10
    TOK_RETURN     shift, and go to state 11
    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 15
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    TOK_POS        shift, and go to state 19
    TOK_NEG        shift, and go to state 20
    '!'            shift, and go to state 21
    '('            shift, and go to state 22
    ';'            shift, and go to state 23
    '{'            shift, and go to state 24

    basetype   go to state 26
    identdecl  go to state 57
    body       go to state 29
    block      go to state 30
    statement  go to state 124
    vardecl    go to state 32
    while      go to state 33
    ifelse     go to state 34
    return     go to state 35
    expr       go to state 36
    unop       go to state 37
    allocator  go to state 38
    cexprs     go to state 39
    call       go to state 40
    variable   go to state 41
    constant   go to state 42


State 108

   11 structdef: TOK_STRUCT TOK_IDENT '{' '}' .

    $default  reduce using rule 11 (structdef)


State 109

    8 structstmts: '{' fielddecl . ';'

    ';'  shift, and go to state 125


State 110

   12 fielddecl: basetype . TOK_IDENT
   13          | basetype . TOK_ARRAY TOK_IDENT

    TOK_ARRAY  shift, and go to state 126
    TOK_IDENT  shift, and go to state 127


State 111

   10 structdef: TOK_STRUCT TOK_IDENT structstmts '}' .

    $default  reduce using rule 10 (structdef)


State 112

    9 structstmts: structstmts fielddecl . ';'

    ';'  shift, and go to state 128


State 113

   44 expr: expr . binop expr
   67 allocator: TOK_NEW TOK_STRING '(' expr . ')'
   74 variable: expr . '[' expr ']'
   75         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 66
    TOK_NE  shift, and go to state 67
    TOK_LT  shift, and go to state 68
    TOK_LE  shift, and go to state 69
    TOK_GT  shift, and go to state 70
    TOK_GE  shift, and go to state 71
    '='     shift, and go to state 72
    '+'     shift, and go to state 73
    '-'     shift, and go to state 74
    '*'     shift, and go to state 75
    '/'     shift, and go to state 76
    '['     shift, and go to state 77
    '.'     shift, and go to state 78
    ')'     shift, and go to state 129

    binop  go to state 80


State 114

   66 allocator: TOK_NEW TOK_IDENT '(' ')' .

    $default  reduce using rule 66 (allocator)


State 115

   44 expr: expr . binop expr
   68 allocator: TOK_NEW basetype '[' expr . ']'
   74 variable: expr . '[' expr ']'
   75         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 66
    TOK_NE  shift, and go to state 67
    TOK_LT  shift, and go to state 68
    TOK_LE  shift, and go to state 69
    TOK_GT  shift, and go to state 70
    TOK_GE  shift, and go to state 71
    '='     shift, and go to state 72
    '+'     shift, and go to state 73
    '-'     shift, and go to state 74
    '*'     shift, and go to state 75
    '/'     shift, and go to state 76
    '['     shift, and go to state 77
    '.'     shift, and go to state 78
    ']'     shift, and go to state 130

    binop  go to state 80


State 116

   38 vardecl: identdecl '=' expr ';' .

    $default  reduce using rule 38 (vardecl)


State 117

   24 function: identdecl '(' ')' ';' .

    $default  reduce using rule 24 (function)


State 118

   23 function: identdecl '(' ')' block .

    $default  reduce using rule 23 (function)


State 119

   20 params: params ',' identdecl .

    $default  reduce using rule 20 (params)


State 120

   22 function: identdecl params ')' ';' .

    $default  reduce using rule 22 (function)


State 121

   21 function: identdecl params ')' block .

    $default  reduce using rule 21 (function)


State 122

   74 variable: expr '[' expr ']' .

    $default  reduce using rule 74 (variable)


State 123

   40 ifelse: TOK_IF '(' expr ')' statement . TOK_ELSE statement
   41       | TOK_IF '(' expr ')' statement .

    TOK_ELSE  shift, and go to state 131

    TOK_ELSE  [reduce using rule 41 (ifelse)]
    $default  reduce using rule 41 (ifelse)


State 124

   39 while: TOK_WHILE '(' expr ')' statement .

    $default  reduce using rule 39 (while)


State 125

    8 structstmts: '{' fielddecl ';' .

    $default  reduce using rule 8 (structstmts)


State 126

   13 fielddecl: basetype TOK_ARRAY . TOK_IDENT

    TOK_IDENT  shift, and go to state 132


State 127

   12 fielddecl: basetype TOK_IDENT .

    $default  reduce using rule 12 (fielddecl)


State 128

    9 structstmts: structstmts fielddecl ';' .

    $default  reduce using rule 9 (structstmts)


State 129

   67 allocator: TOK_NEW TOK_STRING '(' expr ')' .

    $default  reduce using rule 67 (allocator)


State 130

   68 allocator: TOK_NEW basetype '[' expr ']' .

    $default  reduce using rule 68 (allocator)


State 131

   40 ifelse: TOK_IF '(' expr ')' statement TOK_ELSE . statement

    TOK_VOID       shift, and go to state 5
    TOK_CHAR       shift, and go to state 6
    TOK_INT        shift, and go to state 7
    TOK_STRING     shift, and go to state 8
    TOK_IF         shift, and go to state 9
    TOK_WHILE      shift, and go to state 10
    TOK_RETURN     shift, and go to state 11
    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 15
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    TOK_POS        shift, and go to state 19
    TOK_NEG        shift, and go to state 20
    '!'            shift, and go to state 21
    '('            shift, and go to state 22
    ';'            shift, and go to state 23
    '{'            shift, and go to state 24

    basetype   go to state 26
    identdecl  go to state 57
    body       go to state 29
    block      go to state 30
    statement  go to state 133
    vardecl    go to state 32
    while      go to state 33
    ifelse     go to state 34
    return     go to state 35
    expr       go to state 36
    unop       go to state 37
    allocator  go to state 38
    cexprs     go to state 39
    call       go to state 40
    variable   go to state 41
    constant   go to state 42


State 132

   13 fielddecl: basetype TOK_ARRAY TOK_IDENT .

    $default  reduce using rule 13 (fielddecl)


State 133

   40 ifelse: TOK_IF '(' expr ')' statement TOK_ELSE statement .

    $default  reduce using rule 40 (ifelse)
